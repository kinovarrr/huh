#!/bin/bash

DATE=$(date +"%Y%m%d-%H%M")
START=$(date +"%s")

make_build(){
	print "Make kernel dtb..." green
	if [ $TOOLCHAIN == clang ]; then
		export KBUILD_COMPILER_STRING=$(clang/bin/clang --version | head -n 1 | perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g' -e 's/[[:space:]]*$//')
		PATH="$(pwd)/clang/bin:${PATH}"
		make O=out ARCH=arm64 $1
		make -j$(nproc --all) O=out \
				ARCH=arm64 \
				CC=clang \
				AR=llvm-ar \
				NM=llvm-nm \
				OBJCOPY=llvm-objcopy \
				OBJDUMP=llvm-objdump \
				STRIP=llvm-strip \
				CROSS_COMPILE=aarch64-linux-gnu- \
				CROSS_COMPILE_ARM32=arm-linux-gnueabi-
	else
		export CROSS_COMPILE=$(pwd)/gcc64/bin/aarch64-elf-
		export CROSS_COMPILE_ARM32=$(pwd)/gcc32/bin/arm-eabi-
		make O=out ARCH=arm64 $1
		make -j$(nproc --all) O=out ARCH=arm64
	fi
}

make_clean(){
	rm -rf out
}

send_msg(){
	print "${1}" green
	curl -s -X POST https://api.telegram.org/bot"${bot_token}"/sendMessage \
		-d parse_mode="Markdown" \
		-d chat_id="${chat_id}" \
		-d text="${1}"
}

send_file(){
	END=$(date +"%s")
	DIFF=$(($END - $START))
    if [ $TOOLCHAIN == clang ]; then
        COMPILER_TYPE=$(clang/bin/clang --version | head -n 1 | perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g' -e 's/[[:space:]]*$//')
    else
        COMPILER_TYPE="GCC"
    fi
	LINUX_VERSION=$(make kernelversion)
	print "Sending file..." green
	curl -F chat_id="${chat_id}" \
	-F caption="Time: $(($DIFF / 60)) minute(s) and $(($DIFF % 60)) second(s). " \
	-F document=@"${1}" \
	https://api.telegram.org/bot"${bot_token}"/sendDocument

LAST_COMMIT=$(git log --pretty=format:'%s' -5)
CPU=$(nproc --all)
BRANCH=$(git rev-parse --abbrev-ref HEAD)
MYGRP="-1001340890952"

	curl -s -X POST "https://api.telegram.org/bot$bot_token/sendMessage" \
	-d chat_id="$MYGRP" \
	-d "disable_web_page_preview=true" \
	-d "parse_mode=html" \
	-d text="<b>• Device Lavender •</b>%0ALast commit: <code>$LAST_COMMIT</code><b>%0ALinux Version</b>: <code>$LINUX_VERSION</code>%0ABranch: <code>$BRANCH</code>%0ACompiled with: <code>$COMPILER_TYPE</code>%0ACore used: <code>$CPU</code>"

}

mkzip(){
	print "Generate zip file..." green

	if [ -f "out/arch/arm64/boot/Image.gz-dtb" ]; then
		cp out/arch/arm64/boot/Image.gz-dtb  anykernel/
		cd anykernel
		zip -r9 ../$1 * -x .git README.md *placeholder
		cd ..
		send_file $1
	else
		send_msg "Build Failed !"
		print "Build error !" red
		exit 1
	fi
}

print(){
	echo ""
	case ${2} in
		"red")
		echo -e "\033[31m $1 \033[0m";;
		"green")
		echo -e "\033[32m $1 \033[0m";;
		*)
		echo $1
		;;
	esac
}

gen_toolchain(){
	print "Cloning toolchain files..." green
	if [ $TOOLCHAIN == "clang" ]
	then
		git clone --depth=1 https://github.com/kdrag0n/proton-clang.git clang
	else
		git clone --depth=1 https://github.com/chips-project/aarch64-elf gcc64
		git clone --depth=1 https://github.com/chips-project/arm-eabi gcc32
	fi
	git clone --depth=1 https://github.com/Peppe289/AnyKernel3.git -b lavender anykernel
}

build(){

	export type="${1} ${2} ${3}"

	make_clean

	if [ $2 == "-oldcam" ]
	then
		make_build "${1}-perf_defconfig"
	else
		make_build "${1}-perf_defconfig"
	fi
		mkzip "Rave-${1}${2}${3}-$DATE.zip"
}
